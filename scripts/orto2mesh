#!/usr/bin/env python

from dmr5g import WGS_TO_SJTSK, SJTSK_TO_WGS, get_sjtsk_to_utm_trans, get_utm_to_sjtsk_trans, get_wgs_to_utm_trans

from cuzk_tools.msg import OrtoImage
from geometry_msgs.msg import Point, Vector3
from sensor_msgs.msg import PointCloud2
from std_msgs.msg import ColorRGBA, Header, String
from visualization_msgs.msg import Marker

import rospy
import ros_numpy
import numpy as np
from PIL import Image
from scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator
import tf2_ros

class UnsupportedFrameError(Exception):
    pass

class Orto2Mesh():
    def __init__(self, pcd_topic, default_utm_zone):
        rospy.init_node('orto2mesh')

        self.img_path = ""
        self.bounds = []
        self.radius = None
        self.grid_points = None
        self.pcd_utm_local = None

        self.ele_img_sub = rospy.Subscriber("elevation_img", OrtoImage, self.update_orto, queue_size=10)
        self.pcd_sub = rospy.Subscriber(pcd_topic, PointCloud2, self.handle_pcd, queue_size=10)

        self.topic_name = pcd_topic+"_orto_mesh"
        self.pcd_pub = rospy.Publisher(self.topic_name, Marker, queue_size=10, latch=True)

        # UTM LOCAL MANAGEMENT
        self.sjtsk_frame = "sjtsk"
        self.utm_frame = "utm"
        self.utm_local_frame = "utm_local"
        self.wgs_frame = "wgs"

        self.utm_zone = default_utm_zone
        self.utm_zone_sub = rospy.Subscriber("utm_zone", String, self.update_utm_zone, queue_size=10)

        self.utm_local_trans = None
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)
    
    def update_utm_zone(self, msg):
        # The 'utm_zone' topic callback. For Czcehia this should be 33N.
        self.utm_zone = msg.data

    def get_header(self,frame):
        # Helper function.
        header = Header()
        header.stamp = rospy.Time.now()
        header.frame_id = frame
        return header
    
    def img2grid(self, x_max, x_min, y_max, y_min):
        """
        Obtain a square grid corresponding to the pixels of an image (each vertex is the common point of four neighboring pixels...).

        Parameters
        ----------
        x_max : float
            The x coordinate of the right side of the image.
        x_min : float
            The x coordinate of the left side of the image.
        y_max : float
            The y coordinate of the upper side of the image.
        y_min : float
            The y coordinate of the lower side of the image.
        """
        x_points = np.linspace(x_min, x_max, self.w+1)
        y_points = np.linspace(y_min, y_max, self.h+1)

        # Use numpy.meshgrid to create a grid of 2D points
        X, Y = np.meshgrid(x_points, y_points)

        return np.concatenate((X.flatten().reshape(-1,1),Y.flatten().reshape(-1,1)),axis=1)
    
    def interpolate_elevation(self, points, near_points):
        """
        Interpolate elevation from an array of xyz points to an array of xy points.

        Parameters
        ----------
        points : np.ndarray
            Points (xy) which elevation (z coord) we want to obtain by interpolation.
        near_points : np.ndarray
            Points (xyz) with known elevation which we use for the interpolation.
        """

        interpolator = LinearNDInterpolator(near_points[:,:2], near_points[:,2])

        elevation = interpolator(points)

        # Some points on the outskirts cannot be linearly interpolated to. Use 'nearest' instead.
        nan_points = points[np.isnan(elevation)]

        if len(nan_points) > 0:
            interpolator = NearestNDInterpolator(near_points[:,:2], near_points[:,2])
            nan_elevation = interpolator(nan_points)
            elevation[np.isnan(elevation)] = nan_elevation
        
        return elevation

    def generate_tile_ids(self, w, h):
        """
        Each pixel is going to be represented by two triangles in the mesh,
        which equals to six points. Here we calculate the indices of these
        six points in a row-wise representation of shape (w*h,2). 

        Parameters
        ----------
        w : int
            Widht of the original image.
        h : int
            Height of the original image.
        """

        # w,h = number of tiles in rows and cols
        n = (w+1)*(h)
        tile_ids = np.zeros(6*w*h, dtype=np.int)

        offset = 0
        for i in range(n):
            if i%(w+1) == w:
                offset += 1
                continue

            tile_ids[6*(i-offset) : 6*(i-offset+1)] = [i ,i+1, i+w+2, i, i+w+2, i+w+1]

        return tile_ids
    
    def mask_expanded_array(self, array, exp_factor, mask):
        """
        (Positively! meaning keep the masked ones...) Mask pixels of given indices.
        These pixels are represented by six points each. That is why we do the 'expansion'.

        Parameters
        ----------
        array : np.ndarray
            Array we are masking (in our case the tile ids).
        exp_factor : int
            Number of points per pixel.
        mask: np.ndarray
            Points which we want to KEEP.
        """

        # Create an array of offsets to add to the original elements
        offsets = np.arange(exp_factor)

        # Use broadcasting to generate the expanded array
        expanded_mask = exp_factor*mask[:, np.newaxis] + offsets

        # Flatten the result to get a 1D array
        expanded_mask = expanded_mask.flatten()

        return array[expanded_mask]

    def update_orto(self,req):
        """
        Main callback. Whenever we get a new ortofoto we want to update the mesh.

        Parameters
        ----------
        req : cuzk_tools.msg.OrtoImage
        """

        # Get relevant data from the OrtoImage message.
        self.img_frame = req.header.frame_id
        self.img_path = req.path.data
        bounds = [p.data for p in req.bounds]
        centre = np.array([(bounds[2]+bounds[0])/2, (bounds[3]+bounds[1])/2])

        self.radius = (bounds[2] - bounds[0])/2

        # Coord transformers will be useful throughout.
        sjtsk_to_utm_transformer = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])
        wgs_to_utm_transformer = get_wgs_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])

        # We will be publishing the mesh in 'utm_local' coord frame. Prepare for that.
        try:
            self.utm_local_trans = self.tf_buffer.lookup_transform(self.utm_frame, self.utm_local_frame, rospy.Time())
            x_offset = self.utm_local_trans.transform.translation.x
            y_offset = self.utm_local_trans.transform.translation.y
        except:
            rospy.logwarn("Orto2mesh: Cannot obtain transform (utm, utm_local).")

            rate = rospy.Rate(20)
            while self.utm_local_trans is None:
                try:
                    self.utm_local_trans = self.tf_buffer.lookup_transform(self.utm_frame, self.utm_local_frame, rospy.Time())
                except:
                    rospy.loginfo_throttle(2, "Orto2mesh: Waiting for transform (utm, utm_local).")
                    rate.sleep()

            x_offset = self.utm_local_trans.transform.translation.x
            y_offset = self.utm_local_trans.transform.translation.y
            rospy.logwarn("Orto2mesh: Using last known transform.")
                
        # Load ortofoto image.
        self.img = Image.open(self.img_path)
        self.img = self.img.convert('RGB')
        self.img = np.array(self.img)
        self.img = np.flip(self.img,0)

        self.w = self.img.shape[0]
        self.h = self.img.shape[1]

        self.img = self.img.reshape(-1, self.img.shape[-1])

        # Transform the image into a grid. Each pixel will have its corners as points of the grid.
        self.grid_points = self.img2grid(bounds[2],
                                         bounds[0], 
                                         bounds[3], 
                                         bounds[1], 
                                         )
        
        # Get the grid to utm_local frame.
        if self.img_frame == "sjtsk":
            self.grid_points_utm = sjtsk_to_utm_transformer.transform(self.grid_points[:,0], self.grid_points[:,1])
            self.grid_points_utm = np.vstack([self.grid_points_utm[0],self.grid_points_utm[1]]).T
            self.grid_points_utm -= [x_offset, y_offset]
            
            centre_utm = np.array(sjtsk_to_utm_transformer.transform(centre[0],centre[1]))
            centre_utm -= [x_offset, y_offset]

        elif self.img_frame == "utm":
            self.grid_points_utm = self.grid_points
            self.grid_points_utm -= [x_offset, y_offset]
            
            centre_utm = centre
            centre_utm -= [x_offset, y_offset]

        elif self.img_frame == "utm_local":
            self.grid_points_utm = self.grid_points    

            centre_utm = centre
        
        elif self.img_frame == "wgs":
            self.grid_points_utm = wgs_to_utm_transformer.transform(self.grid_points[:,0], self.grid_points[:,1])
            self.grid_points_utm = np.vstack([self.grid_points_utm[0],self.grid_points_utm[1]]).T
            self.grid_points_utm -= [x_offset, y_offset]
            
            centre_utm = np.array(wgs_to_utm_transformer.transform(centre[0],centre[1]))
            centre_utm -= [x_offset, y_offset]
        
        else:
            raise UnsupportedFrameError("Frame {} of orto image is not one of ('sjtsk','utm','utm_local','wgs').".format(self.img_frame))

        # Rectangle grid -> circle of given radius. Mask away the unwanted pixels (i.e. grid points).
        dists = ((self.grid_points_utm[:,0] - centre_utm[0])**2 +
                 (self.grid_points_utm[:,1] - centre_utm[1])**2)**(1/2)
        mask = dists <= self.radius
        mask = np.argwhere(mask)
        mask = np.delete(mask, np.argwhere(np.remainder(mask,self.w+2) == self.w+1)[:,0], 0)
        mask -= np.floor_divide(mask,self.w+2)
        mask = mask[:np.searchsorted(mask.flatten(),self.w*self.h)]


        tile_ids = self.generate_tile_ids(self.w, self.h)
        tile_ids = self.mask_expanded_array(tile_ids, 6, mask)
        self.img = self.img[mask].reshape(-1,3)
        
        # We need the elevation data. It is possible to wait here for a long time,
        # if the elevation data is being published on a different topic then we expect
        # (the one we expect is a parameter of this node 'pcd_topic') while the ortofoto
        # is always on the same topic so we always catch it in this callback.
        rate = rospy.Rate(20)
        while self.pcd_utm_local is None:
            rospy.loginfo_throttle(2, "Orto2mesh: Waiting for elevation pcd.")
            rate.sleep()
            
        # Interpolate to obtain elevation.
        elevation = self.interpolate_elevation(self.grid_points_utm, self.pcd_utm_local)
        points = np.concatenate([self.grid_points_utm, elevation.reshape(-1,1)], axis=1)
        mask = ~np.isnan(elevation)
        
        self.visualize_grid(points, self.img, tile_ids)

    def handle_pcd(self, req):
        """
        Callback for the elevation data.

        Parameters
        ----------
        req : sensor_msgs.msg.PointCloud2
        """
        # These will be used in the `update_orto` callback.
        pcd = ros_numpy.numpify(req)
        pcd_frame = req.header.frame_id
        pcd_data = pcd.view((np.float32,4))[:,:3]

        sjtsk_to_utm_transformer = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])
        wgs_to_utm_transformer = get_wgs_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])

        # We want the data in 'utm_local'.
        if pcd_frame == "utm_local":
            self.pcd_utm_local = pcd_data

        else:
            try:
                self.utm_local_trans = self.tf_buffer.lookup_transform(self.utm_frame, self.utm_local_frame, rospy.Time())
                x_offset = self.utm_local_trans.transform.translation.x
                y_offset = self.utm_local_trans.transform.translation.y
            except:
                rospy.logwarn("Orto2mesh: Cannot obtain transform (utm, utm_local).")

                rate = rospy.Rate(20)
                while self.utm_local_trans is None:
                    try:
                        self.utm_local_trans = self.tf_buffer.lookup_transform(self.utm_frame, self.utm_local_frame, rospy.Time())
                    except:
                        rospy.loginfo_throttle(2, "Orto2mesh: Waiting for transform (utm, utm_local).")
                        rate.sleep()

                x_offset = self.utm_local_trans.transform.translation.x
                y_offset = self.utm_local_trans.transform.translation.y
                rospy.logwarn("Orto2mesh: Using last known transform.")
            
            if pcd_frame == "sjtsk":
                pcd_data_xy = sjtsk_to_utm_transformer.transform(pcd_data[:,0], pcd_data[:,1])
                pcd_data = np.vstack([pcd_data_xy[0], pcd_data_xy[1], pcd_data[2]]).T
                pcd_data -= [x_offset, y_offset, 0]
                self.pcd_utm_local = pcd_data 

            elif pcd_frame == "utm":
                pcd_data -= [x_offset, y_offset]
                self.pcd_utm_local = pcd_data 
            
            elif pcd_frame == "wgs": 
                pcd_data_xy = wgs_to_utm_transformer.transform(pcd_data[:,0], pcd_data[:,1])
                pcd_data = np.vstack([pcd_data_xy[0], pcd_data_xy[1], pcd_data[:,2]]).T
                pcd_data -= [x_offset, y_offset, 0]
                self.pcd_utm_local = pcd_data 

            else:
                raise UnsupportedFrameError("Frame {} of orto image is not one of ('sjtsk','utm','utm_local','wgs').".format(self.img_frame))

    def visualize_grid(self, points, colors, tile_ids):
        """
        Publish the mesh.

        Parameters
        ----------
        points : np.ndarray
            xyz points of the grid (not masked)
        colors : np.ndarray
            colors for each pixel (masked)
        tile_ids: np.ndarray
            indices into points, where each pixel is represented by six indices (two triangles)
            so the size should be 6*len(colors)
        """
        triangle_points = np.array([Point(p[0],p[1],p[2]) for p in points[tile_ids]])    # slow

        if len(colors):
            colors = colors.astype(np.float32)
            colors /= 255.
            colors = [ColorRGBA(r=c[0], g=c[1], b=c[2], a=1.) for c in colors]     # slow
            colors = np.repeat(colors, 6)

        header = self.get_header("utm_local")

        marker = Marker(header=header,
                        ns="mesh",
                        id=1,
                        type=Marker.TRIANGLE_LIST,
                        action=Marker.ADD,
                        scale=Vector3(1,1,1),
                        lifetime=rospy.Duration(0),
                        points = triangle_points,
                        colors = colors)

        rospy.loginfo("orto2mesh: Publishing mesh at {}.".format(self.topic_name))
        self.pcd_pub.publish(marker)

if __name__ == "__main__":
    pcd_topic = rospy.get_param('/orto2mesh/pcd_topic', "")
    default_utm_zone = rospy.get_param('/orto2mesh/default_utm_zone', "33N")
    node = Orto2Mesh(pcd_topic, default_utm_zone)
    rospy.spin()