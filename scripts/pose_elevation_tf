#!/usr/bin/env python

import rospy
import ros_numpy
import std_msgs
import tf2_ros

from copy import deepcopy

from sensor_msgs.msg import PointCloud2, PointField
import sensor_msgs.point_cloud2 as pc2
from std_msgs.msg import String
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Transform, TransformStamped

from cuzk_tools.srv import ElevationSetTF, ElevationSetTFResponse

import json
import pylas
import random
import numpy as np
import os
import struct
from scipy.spatial import cKDTree
from scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator


from dmr5g import Dmr5gParser, WGS_TO_SJTSK, SJTSK_TO_WGS, get_sjtsk_to_utm_trans, get_utm_to_sjtsk_trans
from orto import get_img
from img2rgb import img2rgb
from elevation_class import Elevation,UnsupportedFrameError


class ElevationTF(Elevation):
    def __init__(self, reference_tf, default_utm_zone, default_followed_tf):
        rospy.init_node('pose_elevation_tf')

        self.reference_tf = reference_tf
        self.followed_tf = default_followed_tf

        self.cache_dir = os.environ['HOME'] + "/.ros/cache/"

        if not os.path.exists(self.cache_dir):
            os.mkdir(self.cache_dir)
            
        self.elev_data_parser = Dmr5gParser(self.cache_dir)

        self.utm_zone = default_utm_zone
        self.utm_zone_sub = rospy.Subscriber("utm_zone", String, self.update_utm_zone, queue_size=10)

        self.utm_local_trans = None
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.tf_broadcaster = tf2_ros.TransformBroadcaster()

        rospy.Service('set_elevation_tf', ElevationSetTF, self.handle_set_tf)
        
        self.tree_dict = dict()
        self.tile_data_dict = dict()

    def handle_set_tf(self, req):
        self.followed_tf = req.frame.data
        return ElevationSetTFResponse()     # empty response

    def sjtsk2elevation(self, sjtsk_coords):
        # Get tile containing robot position.
        tile_id = self.elev_data_parser.get_tile_ids(sjtsk_coords, 0)[0]

        # If tile is new, open it, create cKDTree (x,y only), save it.
        if tile_id in self.tile_data_dict and tile_id in self.tree_dict:
            pass
        else:
            tile_data = self.get_data(sjtsk_coords,None)

            if len(tile_data) == 0:
                rospy.logwarn("No data available. Defaulting to elevation = 0.")
                return 0.
            
            self.tile_data_dict[tile_id] = tile_data.view((np.float64,len(tile_data.dtype.names)))

            self.tree_dict[tile_id] = cKDTree(self.tile_data_dict[tile_id][:,:2])

        # Use (saved) cKDTree to find nearest point.
        _,inds = self.tree_dict[tile_id].query(sjtsk_coords, k=10)
        nearest_points = self.tile_data_dict[tile_id][inds,:]

        # Interpolate to obtain elevation.
        elevation = self.interpolate_elevation(sjtsk_coords, nearest_points)

        # Create response with x,y,z. 
        return elevation
    
    def interpolate_elevation(self, point, near_points):
        try:
            interpolator = LinearNDInterpolator(near_points[:,:2], near_points[:,2])
        except:
            rospy.logwarn("Using nearest interpolation instead of linear due to error.")
            interpolator = NearestNDInterpolator(near_points[:,:2], near_points[:,2])

        elevation = interpolator(point)

        if np.isnan(elevation):
            rospy.logwarn("Using nearest interpolation instead of linear due to nan.")
            interpolator = NearestNDInterpolator(near_points[:,:2], near_points[:,2])
            elevation = interpolator(point)
        
        return elevation
    
if __name__ == "__main__":
    reference_tf = "utm" #rospy.get_param('/pose_elevation_tf/reference_tf', None)
    default_utm_zone = rospy.get_param('/pose_elevation_tf/default_utm_zone', None)
    default_followed_tf = rospy.get_param('/pose_elevation_tf/default_followed_tf', None)
    node = ElevationTF(reference_tf, default_utm_zone, default_followed_tf)

    rate = rospy.Rate(1)
    
    while not rospy.is_shutdown():
        try:
            trans = node.tf_buffer.lookup_transform(node.reference_tf, node.followed_tf, rospy.Time())
        except:
            rospy.logwarn_throttle(5,"Waiting for transformation between {} and {}.".format(node.followed_tf, node.reference_tf))
            rate.sleep()
            continue        
        
        trans.transform.translation.x += random.uniform(-100,100)
        trans.transform.translation.y += random.uniform(-100,100)
        
        utm_coords = [trans.transform.translation.x, trans.transform.translation.y] 
        
        if node.utm_zone is None:
            rospy.logwarn_throttle(5,"utm_zone has not been set.")
            rospy.sleep(rate)
            continue

        sjtsk_coords = get_utm_to_sjtsk_trans(node.utm_zone[2], node.utm_zone[:2]).transform(utm_coords[0],utm_coords[1])
        elevation = node.sjtsk2elevation(sjtsk_coords)

        msg = TransformStamped()
        trans_ele = trans.transform
        trans_ele.translation.z = elevation

        msg.header = node.get_header(node.reference_tf)
        msg.child_frame_id = node.followed_tf + "_elev"
        msg.transform = trans_ele

        node.tf_broadcaster.sendTransform(msg)

        rate.sleep()