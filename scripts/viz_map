#!/usr/bin/env python3

"""Adapted from the node 'osm_server' from the 'osm_cartography' package."""

import rospy

import sys
import itertools
import geodesy.props
import geodesy.utm
import geodesy.wu_point
from geodesy import bounding_box

from geographic_msgs.msg import GeographicMap
from geographic_msgs.srv import GetGeographicMap

from cuzk_tools.srv import GetTopography,GetTopographyResponse

from geometry_msgs.msg import Point
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Vector3
from std_msgs.msg import ColorRGBA
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray

# dynamic parameter reconfiguration
from dynamic_reconfigure.server import Server as ReconfigureServer
import osm_cartography.cfg.VizOSMConfig as Config


class VizNode:
    def __init__(self):
        """ROS node to publish visualization markers for a GeographicMap."""
        rospy.init_node("viz_map")
        self.config = None

        # advertise visualization marker topic
        self.pub = rospy.Publisher(
            "visualization_marker_array", MarkerArray, latch=True, queue_size=10
        )
        self.map = None
        self.msg = None
        #rospy.wait_for_service("topography")
        #self.get_map = rospy.ServiceProxy("topography", GetTopography)

        # refresh the markers every three seconds, making them last fourh.
        self.timer_interval = rospy.Duration(3)
        self.marker_life = self.timer_interval + rospy.Duration(1)
        rospy.Timer(self.timer_interval, self.timer_callback)

        self.sub = rospy.Subscriber("topography", GeographicMap, self.handle_topo, queue_size=10)

        # register dynamic reconfigure callback, which runs immediately
        #self.reconf_server = ReconfigureServer(Config, self.reconfigure)

    def match(self, msg, val_set):
        if type(val_set) is not set:
            raise ValueError('property matching requires a set of keys')
        for prop in msg.props:
            if prop.value in val_set:
                return (prop.key, prop.value)
        return None

    def get_markers(self, gmap):
        """Get markers for a GeographicMap message.

        :post: self.msg = visualization markers message
        """
        self.map = gmap
        
        self.map_points = gmap.points

        # WUPOINT style:
        self.way_point_ids = {}  
        for wid in range(len(self.map_points)):
            self.way_point_ids[self.map_points[wid].id.uuid] = wid

        self.msg = MarkerArray()
        self.mark_boundaries(ColorRGBA(r=0.5, g=0.5, b=0.5, a=0.8))
        self.mark_way_points(ColorRGBA(r=1.0, g=1.0, b=0.0, a=0.8))

        # define arguments for displaying various feature types
        fargs = [
            (
                lambda f: self.match(f, set(["roads"])),
                ColorRGBA(r=8.0, g=0.2, b=0.2, a=0.8),
                "roads",
            ),
            (
                lambda f: self.match(f, set(["buildings"])),
                ColorRGBA(r=0.0, g=0.3, b=0.7, a=0.8),
                "buildings",
            ),
            (
                lambda f: self.match(f, set(["rails"])),
                ColorRGBA(r=0.0, g=0.7, b=0.7, a=0.8),
                "rails",
            ),
            (
                lambda f: self.match(f, set(["footways"])),
                ColorRGBA(r=0.0, g=1.0, b=0.0, a=0.5),
                "footways",
            ),
            (
                lambda f: self.match(f, set(["water"])),
                ColorRGBA(r=0.0, g=0.0, b=1.0, a=0.5),
                "water",
            ),
            (
                lambda f: self.match(f, set(["forest"])),
                ColorRGBA(r=0.2, g=1.0, b=0.3, a=0.5),
                "forest",
            ),
            (
                lambda f: self.match(f, set(["antiforest"])),
                ColorRGBA(r=0.4, g=0.0, b=0.4, a=0.5),
                "antiforest",
            ),
            (
                lambda f: self.match(f, set(["agriculture"])),
                ColorRGBA(r=0.3, g=0.7, b=0.7, a=0.5),
                "agriculture",
            ),
            (
                lambda f: self.match(f, set(["untraversable"])),
                ColorRGBA(r=0.6, g=0.0, b=0.3, a=0.5),
                "untraversable",
            ),
            (
                lambda f: self.match(f, set(["traversable"])),
                ColorRGBA(r=0.2, g=0.6, b=0.4, a=0.5),
                "traversable",
            ),
            (
                lambda f: self.match(f, set(["obstacles"])),
                ColorRGBA(r=1.0, g=0.6, b=0.6, a=0.5),
                "obstacles",
            ),
            
        ]
        for args in fargs:
            self.mark_features(*args)

    def mark_boundaries(self, color):
        # draw outline of map boundaries
        marker = Marker(
            header=self.map.header,
            ns="bounds_osm",
            id=0,
            type=Marker.LINE_STRIP,
            action=Marker.ADD,
            scale=Vector3(x=2.0),
            color=color,
            lifetime=self.marker_life,
        )

        # Convert bounds latitudes and longitudes to UTM (no
        # altitude), convert UTM points to geometry_msgs/Point
        bbox = self.map.bounds
        p0 = Point(bbox.min_pt.longitude, bbox.min_pt.latitude, 0.)
        p1 = Point(bbox.max_pt.longitude, bbox.min_pt.latitude, 0.)
        p2 = Point(bbox.max_pt.longitude, bbox.max_pt.latitude, 0.)
        p3 = Point(bbox.min_pt.longitude, bbox.max_pt.latitude, 0.)

        #min_lat, min_lon, max_lat, max_lon = bounding_box.getLatLong(bbox)
        #p0 = geodesy.utm.fromLatLong(min_lat, min_lon).toPoint()
        #p1 = geodesy.utm.fromLatLong(min_lat, max_lon).toPoint()
        #p2 = geodesy.utm.fromLatLong(max_lat, max_lon).toPoint()
        #p3 = geodesy.utm.fromLatLong(max_lat, min_lon).toPoint()

        # add line strips to bounds marker
        marker.points.append(p0)
        marker.points.append(p1)
        marker.points.append(p1)
        marker.points.append(p2)
        marker.points.append(p2)
        marker.points.append(p3)
        marker.points.append(p3)
        marker.points.append(p0)
        self.msg.markers.append(marker)

    def mark_features(self, predicate, color, namespace):
        """Create outline for map features

        :param predicate: function to match desired features
        :param color: RGBA value
        :param namespace: Rviz namespace.

        :todo: differentiate properties for: highway, building,
               bridge, tunnel, amenity, etc.
        """
        index = 0
        for feature in filter(predicate, self.map.features):
            if len(feature.components) <= 1:
                continue
            marker = Marker(
                header=self.map.header,
                ns=namespace,
                id=index,
                type=Marker.LINE_STRIP,
                action=Marker.ADD,
                scale=Vector3(x=2.0),
                color=color,
                lifetime=self.marker_life,
            )
            index += 1
            prev_point = None
            for mbr in feature.components:
                wu_point_index = self.way_point_ids.get(mbr.uuid)
                point = self.map_points[wu_point_index]

                if point:  # this component is a way point
                    p = Point(point.position.latitude, point.position.longitude, 0.)
                    if prev_point:
                        marker.points.append(prev_point)
                        marker.points.append(p)
                    prev_point = p
            self.msg.markers.append(marker)

    def mark_way_points(self, color):
        """Create slightly transparent disks for way-points.

        :param color: disk RGBA value
        """
        index = 0
        for wp in self.map_points:
            marker = Marker(
                header=self.map.header,
                ns="waypoints_osm",
                id=index,
                type=Marker.CYLINDER,
                action=Marker.ADD,
                scale=Vector3(x=2.0, y=2.0, z=0.2),
                color=color,
                lifetime=self.marker_life,
            )
            index += 1
            # use easting and northing coordinates (ignoring altitude)
            marker.pose.position = Point(wp.position.latitude, wp.position.longitude, 0.)
            marker.pose.orientation = Quaternion(x=0.0, y=0.0, z=0.0, w=1.0)
            self.msg.markers.append(marker)

    def handle_topo(self, msg):
        geo_map = msg
        self.get_markers(geo_map)
        self.pub.publish(self.msg)

        return None

    def timer_callback(self, event):
        """ Called periodically to refresh map visualization. """
        if self.msg is not None:
            now = rospy.Time()
            for m in self.msg.markers:
                m.header.stamp = now
            self.pub.publish(self.msg)


def main():
    viznode = VizNode()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


if __name__ == "__main__":
    # run main function and exit
    sys.exit(main())