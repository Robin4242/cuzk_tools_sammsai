#!/usr/bin/env python

""" 
NOTE: This node is sort of obsolete as the orto2mesh node does overall a better job.

A ROS node generating a mesh mainly used for visualization of a robot in open terrain. 
The data used for this comes from ČÚZK and is completely free to access.
The data covers the whole of Czechia and nothing more. Two specific data sources are
being used: 'ZABAGED Výškopis DMR5G' elevation data and 'Ortofoto ČR' ortophotos.

How it works: Each point of the elevation data is coloured according to the photo,
A triangular mesh is then automatically generated using open3d and pymeshfix.
"""


from img2rgb import img2rgb
from ros_open3d_conversion import convertCloudFromRosToOpen3d, ball_pivoting_reconstruction
from dmr5g import WGS_TO_SJTSK, SJTSK_TO_WGS, get_sjtsk_to_utm_trans, get_utm_to_sjtsk_trans

from cuzk_tools.msg import OrtoImage
from geometry_msgs.msg import Point, Vector3
from sensor_msgs.msg import PointCloud2, PointField
from std_msgs.msg import ColorRGBA, Header, String
from visualization_msgs.msg import Marker, MarkerArray

import rospy
import numpy as np
import tf2_ros


class Pcd2Mesh():
    def __init__(self, pcd_topic, default_utm_zone, hole_filling_power):
        rospy.init_node('pcd2mesh')

        self.hole_filling_power = hole_filling_power

        self.img_path = ""
        self.bounds = []
        self.radius = None

        self.ele_img_sub = rospy.Subscriber("elevation_img", OrtoImage, self.update_orto, queue_size=10)
        self.pcd_sub = rospy.Subscriber(pcd_topic, PointCloud2, self.handle_pcd, queue_size=10)

        self.topic_name = pcd_topic+"_mesh"
        self.pcd_pub = rospy.Publisher(self.topic_name, Marker, queue_size=10, latch=True)

        # UTM LOCAL MANAGEMENT
        self.sjtsk_frame = "sjtsk"
        self.utm_frame = "utm"
        self.utm_local_frame = "utm_local"
        self.wgs_frame = "wgs"

        self.utm_zone = default_utm_zone
        self.utm_zone_sub = rospy.Subscriber("utm_zone", String, self.update_utm_zone, queue_size=10)

        self.utm_local_trans = None
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)
    
    def update_utm_zone(self, msg):
        self.utm_zone = msg.data

    def update_orto(self,req):
        self.img_frame = req.header.frame_id
        self.img_path = req.path.data
        self.bounds = [p.data for p in req.bounds] 
        self.radius = (self.bounds[2] - self.bounds[0])/2

    def handle_pcd(self,req):
        ros_pcd = req

        rospy.loginfo("pcd2mesh: Converting to open3d.")
        o3d_pcd, xyzrgb = convertCloudFromRosToOpen3d(ros_pcd)

        rospy.loginfo("pcd2mesh: Creating mesh.")
        if self.radius is not None:
            points, triangles = ball_pivoting_reconstruction(o3d_pcd, hole_filling_power = max(40., min(300.,self.radius)))
        else:
            points, triangles = ball_pivoting_reconstruction(o3d_pcd, hole_filling_power = self.hole_filling_power)

        colors = []

        if self.bounds and self.img_path != "":
            tl_bl_br = np.array([[self.bounds[0], self.bounds[3]],
                                 [self.bounds[0], self.bounds[1]],
                                 [self.bounds[2], self.bounds[1]]])
            
            trans_tl_bl_br = self.sjtsk2frame(tl_bl_br, req.header.frame_id)

            if trans_tl_bl_br is not None:
                colors = img2rgb(self.img_path, trans_tl_bl_br, points[:,:2])/255.

        triangle_points = points[triangles]
        triangle_points = triangle_points.reshape(-1,3)
        triangle_points = np.array([Point(p[0],p[1],p[2]) for p in triangle_points])    # slow

        marker_points = triangle_points

        if len(colors):
            triangle_colors = np.mean(colors[triangles], axis=1)
            colors = [ColorRGBA(r=c[0], g=c[1], b=c[2], a=1.) for c in triangle_colors]     # slow
            colors = np.repeat(colors, 3)

        marker = Marker(header=req.header,
                        ns="mesh",
                        id=0,
                        type=Marker.TRIANGLE_LIST,
                        action=Marker.ADD,
                        scale=Vector3(1,1,1),
                        #color=ColorRGBA(r=c[0], g=c[1], b=c[2], a=1.),
                        lifetime=rospy.Duration(0),
                        points = marker_points,
                        colors = colors)

        rospy.loginfo("pcd2mesh: Publishing mesh at {}.".format(self.topic_name))
        self.pcd_pub.publish(marker)
    
    def sjtsk2frame(self, sjtsk_points, frame):
        if frame == "sjtsk":
            return sjtsk_points
        
        elif frame == "utm":
            if self.utm_zone is None:
                raise ValueError("sjtsk2frame: utm_zone has not been set.")
            
            transformer = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])
            transformed_points = transformer.transform(sjtsk_points[:,0], sjtsk_points[:,1])
            transformed_points = np.vstack([transformed_points[0],transformed_points[1]]).T

            return transformed_points
        
        elif frame == "utm_local":
            if self.utm_zone is None:
                rospy.logwarn("sjtsk2frame: utm_zone has not been set. Returning None.")
                return None
            
            transformer = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])
            utm_points = transformer.transform(sjtsk_points[:,0], sjtsk_points[:,1])
            utm_points = np.vstack([utm_points[0],utm_points[1]]).T
            
            try:
                self.utm_local_trans = self.tf_buffer.lookup_transform(self.utm_frame, self.utm_local_frame, rospy.Time())
            except:
                rospy.logwarn("sjtsk2frame: Cannot obtain transform (utm, utm_local).")
                if self.utm_local_trans is not None:
                    rospy.logwarn("sjtsk2frame: Using last known transform.")
                else:
                    rospy.logwarn("sjtsk2frame: Returning None.")
                    return None
                
            utm_points[:,0] -= self.utm_local_trans.transform.translation.x
            utm_points[:,1] -= self.utm_local_trans.transform.translation.y

            return utm_points
        
        elif frame=="wgs":
            transformer = SJTSK_TO_WGS
            transformed_points = transformer.transform(sjtsk_points[:,0], sjtsk_points[:,1])
            transformed_points = np.vstack([transformed_points[0],transformed_points[1]]).T

            return transformed_points
    
if __name__ == "__main__":
    pcd_topic = rospy.get_param('/pcd2mesh/pcd_topic', "")
    default_utm_zone = rospy.get_param('/pcd2mesh/default_utm_zone', "33N")
    hole_filling_power = rospy.get_param('/pcd2mesh/default_hole_filling_power', 50)
    node = Pcd2Mesh(pcd_topic, default_utm_zone, hole_filling_power)
    rospy.spin()