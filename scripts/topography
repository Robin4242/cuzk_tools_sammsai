#!/usr/bin/env python

import rospy
import ros_numpy
import std_msgs

from cuzk_tools.msg import Polygons, LineString, LineStringArray, PointArray, TopographyCategory
from cuzk_tools.msg import Topography as TopographyMsg
from geographic_msgs.msg import GeographicMap, WayPoint, MapFeature, KeyValue

from unique_id import fromURL

from jsk_recognition_msgs.msg import PolygonArray
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import Polygon, PolygonStamped, Point32, Point
from cuzk_tools.srv import GetTopography,GetTopographyResponse

import pylas
import fiona
from tqdm import tqdm
import numpy as np
import os
import math
import xml.etree.ElementTree as ET
import urllib.request
import shapely.geometry as shap

from gpkg_parser import XMIN,YMIN,XMAX,YMAX,H,W, get_rects, categories_str
from dmr5g import WGS_TO_SJTSK

SCALE = 1/100

class Topography:
    def __init__(self, vis_bool=True):
        rospy.init_node('topography')

        self.check_file_updated()

        self.sjtsk_frame = "sjtsk"

        self.data_dir = "/home/aherold/ws/src/cuzk_tools/data/gpkg_files/"
        
        self.topography_pub = rospy.Publisher('topography', GeographicMap, queue_size=10, latch=True)

        self.vis_pubs = dict()
        if vis_bool:
            for c in categories_str:
                pub_name = 'topography'+'/'+c
                self.vis_pubs[c] = rospy.Publisher(pub_name, PolygonArray, queue_size=10, latch=True)
                                    
        rospy.Service('topography', GetTopography, self.handle_topography_service)

    def check_file_updated(self):
        url = "https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml"
        updated_fn = 'src/cuzk_tools/cache/gpkg_updated.txt'

        prev_updated = ""

        try:
            with open(updated_fn, 'r') as file:
                prev_updated = file.readline()
        except:
            pass

        try:
            response = urllib.request.urlopen(url)
            xml_data = response.read().decode('utf-8')
            root = ET.fromstring(xml_data)
            
            updated = root.find(f"{{{'http://www.w3.org/2005/Atom'}}}updated").text

            if updated != prev_updated:
                rospy.logwarn("Present GPKG file: {}, Newest GPKG file: {}. Consider downloading the newest GPKG file: \n\
Go to https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml and click a link which looks like https://atom.cuzk.cz/ZABAGED-GPKG/datasetFeeds/CZ-00025712-CUZK_ZABAGED-GPKG_1.xml. \n\
Finally download newest data using a link which looks like https://openzu.cuzk.cz/opendata/ZABAGED-GPKG/epsg-5514/ZABAGED-5514-gpkg-20230715.zip".format(prev_updated, updated))


            with open(updated_fn, 'w+') as file:
                file.write(updated)

            #https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml
            return response, xml_data
        except:
            rospy.loginfo("Tried to check if online ZABAGED polohopis file is updated but failed (maybe due to no internet connection?).")
    

        for i,entry in enumerate(self.root.iter(f"{{{self.namespace['atom']}}}entry")):
            if i == id:
                update_date = entry.find(f"{{{self.namespace['atom']}}}updated").text
                return update_date
    
    def add_header(self, msg, frame):
        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()
        header.frame_id = frame
        
        msg.header = header

        return msg 
    
    def point2polygon(self, point, radius):
        x, y = point.x,point.y

        polygon = [] # an octagon to be precise
        for i in range(8):
            angle = i * math.pi / 4
            new_x = x + radius * math.cos(angle)
            new_y = y + radius * math.sin(angle)
            polygon.append((new_x, new_y))

        return polygon
    
    def linestring2polygon(self, ls, dist):
        points = [(lsp.x, lsp.y) for lsp in ls.points]
        shap_ls = shap.LineString(points)
        poly = shap_ls.buffer(dist)

        try:
            return list(poly.exterior.coords)
        except:
            conc_poly = []
            for pol in poly.geoms:
                conc_poly += list(pol.exterior.coords)
            return conc_poly
    

    def data2poly_msg(self, data, center_point=None):
        points = [None] * len(data)
        
        for i,row in enumerate(data):
            p = Point32()

            if not center_point is None:
                p.x = (row[0] - center_point[0]) * SCALE
                p.y = (row[1] - center_point[1]) * SCALE
                p.z = 0.

            else:
                p.x = row[0]
                p.y = row[1]
                p.z = 0.

            points[i] = p

        poly = Polygon()
        poly.points = points
        
        poly_stamped = PolygonStamped()
        poly_stamped = self.add_header(poly_stamped, "sjtsk")

        
        poly_stamped.polygon = poly
        
        return poly_stamped
    
    def visualize_topography_msg(self, msg):
        for c_msg in msg.categories:
            poly_arr = PolygonArray()
            msg = self.add_header(poly_arr, "sjtsk")

            for p in c_msg.points.points:
                poly = self.point2polygon(p,2 * SCALE)
                
                poly_msg = self.data2poly_msg(poly,None)

                poly_arr.polygons.append(poly_msg)

            for ls in c_msg.linestrings.linestrings:
                poly = self.linestring2polygon(ls,2 * SCALE)

                poly_msg = self.data2poly_msg(poly,None)

                poly_arr.polygons.append(poly_msg)

            for poly_msg in c_msg.polygons.polygons:
                poly_arr.polygons.append(poly_msg)

            self.vis_pubs[c_msg.name].publish(poly_arr)
            
    def id2url(self, id, c=None):
        # Not at all a real URL.
        if c is None:
            return "https://ags.cuzk.cz/" +str(id)
        else:
            return "https://ags.cuzk.cz/" +str(id) +'/' +str(c)
        
    def handle_topography_service(self, req):
        # Assuming 'req' is of type GetTopography, which contains 'point' and 'radius' fields.

        radius = req.radius.data
        point = [req.point.x, req.point.y]
        point_sjtsk = WGS_TO_SJTSK.transform(point[1],point[0])

        x_min = point_sjtsk[0] - radius
        y_min = point_sjtsk[1] - radius
        x_max = point_sjtsk[0] + radius
        y_max = point_sjtsk[1] + radius

        msg = GeographicMap()
        msg = self.add_header(msg, self.sjtsk_frame)
        msg.id.uuid = fromURL("https://ags.cuzk.cz/"+str(point[0])+'/'+str(point[1])+'/'+str(radius)).bytes
        msg.bounds.min_pt.latitude = y_min
        msg.bounds.min_pt.longitude = x_min
        msg.bounds.max_pt.latitude = y_max
        msg.bounds.max_pt.longitude = x_max

        rects = get_rects(x_min,y_min,x_max,y_max,H,W)

        for rect in rects:
            fn = self.data_dir  + 'topography' + '_' \
                                + str(rect[0])[1:] + '_' \
                                + str(rect[1])[1:] + '_' \
                                + str(rect[2])[1:] + '_' \
                                + str(rect[3])[1:]
            
            #BudovaJednotlivaNeboBlokBudov
            for layer_name in fiona.listlayers(fn):

                category_name = layer_name.split('_')[0]
                category_ind = categories_str.index(category_name)

                geom_name = layer_name.split('_')[1]

                with fiona.open(fn, layer=layer_name) as layer:

                    print(category_name)
                    print(geom_name)
                    print(len(layer))

                    for feature in tqdm(layer):

                        coords = feature['geometry']['coordinates']
                        geom_type = feature['geometry']['type']
                        id = feature['properties']['fid_zbg']

                        map_feature = MapFeature()
                        map_feature.id.uuid = fromURL(self.id2url(id)).bytes
                        key_val = KeyValue()
                        key_val.key = "category"
                        key_val.value = category_name
                        map_feature.props.append(key_val)

                        if geom_type == 'Point':
                            data = coords

                            dists = ((data[0] - point_sjtsk[0])**2 + (data[1] - point_sjtsk[1])**2)**(1/2)
                            if not np.any(dists<radius):
                                continue

                            # FOR NOW KEEP COORDS IN SJTSK. IT'S JUST TEMPORARY DON'T WORRY, OK?
                            point_msg = WayPoint()
                            point_msg.id.uuid = fromURL(self.id2url(id,0)).bytes
                            #point_msg.props.key = "category"
                            #point_msg.props.value = category_name
                            point_msg.position.latitude = data[0]
                            point_msg.position.longitude = data[1]
                            point_msg.position.altitude = 0.

                            msg.points.append(point_msg)
                            map_feature.components.append(point_msg.id)


                        elif geom_type == 'MultiLineString':
                            if len(coords) > 1:
                                print("Aw shucks")

                            data = np.array(coords[0])

                            dists = ((data[:,0] - point_sjtsk[0])**2 + (data[:,1] - point_sjtsk[1])**2)**(1/2)
                            
                            if not np.any(dists<radius):
                                continue

                            c = 0
                            for row in data:
                                # FOR NOW KEEP COORDS IN SJTSK. IT'S JUST TEMPORARY DON'T WORRY, OK?
                                point_msg = WayPoint()
                                point_msg.id.uuid = fromURL(self.id2url(id,c)).bytes
                                #point_msg.props.key = "category"
                                #point_msg.props.value = category_name
                                point_msg.position.latitude = row[0] 
                                point_msg.position.longitude = row[1]
                                point_msg.position.altitude = 0.

                                msg.points.append(point_msg)

                                map_feature.components.append(point_msg.id)

                                c += 1
                            

                        elif geom_type == 'MultiPolygon':
                            data = np.array(coords[0][0])                            

                            dists = ((data[:,0] - point_sjtsk[0])**2 + (data[:,1] - point_sjtsk[1])**2)**(1/2)
                            
                            if not np.any(dists<radius):
                                continue

                            c = 0
                            for row in data:
                                # FOR NOW KEEP COORDS IN SJTSK. IT'S JUST TEMPORARY DON'T WORRY, OK?
                                point_msg = WayPoint()
                                point_msg.id.uuid = fromURL(self.id2url(id,c)).bytes
                                #point_msg.props.key = "category"
                                #point_msg.props.value = category_name
                                point_msg.position.latitude = row[0]
                                point_msg.position.longitude = row[1]
                                point_msg.position.altitude = 0.

                                msg.points.append(point_msg)

                                map_feature.components.append(point_msg.id)

                                c += 1
                        
                        else:
                            raise TypeError("Expected types are MultiLineString, MultiPolygon and Point. Got {} instead.".format(geom_type))

                        msg.features.append(map_feature)

        self.topography_pub.publish(msg)
        #self.visualize_topography_msg(msg)

        # Return empty-ish response.
        response = GetTopographyResponse()
        response.map = msg
        return response


if __name__ == "__main__":
    node = Topography()
    rospy.spin()
