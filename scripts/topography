#!/usr/bin/env python

import rospy
import ros_numpy
import std_msgs
from datetime import datetime
import tf2_ros

from cuzk_tools.msg import Polygons, LineString, LineStringArray, PointArray, TopographyCategory
from cuzk_tools.msg import Topography as TopographyMsg
from geographic_msgs.msg import GeographicMap, WayPoint, MapFeature, KeyValue
from std_msgs.msg import String, Float64

from unique_id import fromURL

from jsk_recognition_msgs.msg import PolygonArray
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import Polygon, PolygonStamped, Point32, Point
from cuzk_tools.srv import GetTopography,GetTopographyResponse, ElevationGet

import fiona
from tqdm import tqdm
import numpy as np
import os
import math
import xml.etree.ElementTree as ET
import urllib.request
import shapely.geometry as shap

from gpkg_parser import XMIN,YMIN,XMAX,YMAX,H,W, get_rects, categories_str, original_categories_str
from dmr5g import WGS_TO_SJTSK, SJTSK_TO_WGS, get_sjtsk_to_utm_trans, get_utm_to_sjtsk_trans

from interpolate_elevation import interpolate_elevation

SCALE = 1/100
DATA_PATH = os.environ['HOME'] + "/.ros/cache/cuzk_tools/topography/data.gpkg"

class Topography:
    def __init__(self, default_utm_zone, vis_bool=True, include_elevation=True):            
        """ By default topography includes elevation data (include_elevation=True). """

        rospy.init_node('topography')

        rospy.loginfo("TOPOGRAPHY: If you are running the topography node for the first time, \
you probably need to download the data.gpkg file from the CUZK. This file contains all the data \
and is around 12 GB. Download it manually like this (yes, the process seems strange, I didn't find another way to get the file...):\n\
 - Go to https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml \n\
 - Click a link which looks like https://atom.cuzk.cz/ZABAGED-GPKG/datasetFeeds/CZ-00025712-CUZK_ZABAGED-GPKG_1.xml \n\
 - Download the newest data using a link which looks like https://openzu.cuzk.cz/opendata/ZABAGED-GPKG/epsg-5514/ZABAGED-5514-gpkg-20230715.zip \n\
 - Save the gpkg file ideally over at $HOME/.ros/cache/cuzk_tools/topography/data.gpkg (or at another path, but then you need to change some of the paths hardcoded in this package) \n\
 - Run gpkg_parser.py (just a one time thing) to split the giant data file into smaller ones. This can take some time (~40 minutes). If it crashes due to no RAM, consider decreasing the RAM_LIMIT in gpkg_parser.py.")
        
        self.include_elevation = include_elevation
        self.check_file_updated()

        self.sjtsk_frame = "sjtsk"

        #self.data_dir = "/home/aherold/ws/src/cuzk_tools/data/gpkg_files/"

        self.cache_dir = os.environ['HOME'] + "/.ros/cache/cuzk_tools/topography/gpkg_files/"

        if not os.path.exists(self.cache_dir):
            os.mkdir(self.cache_dir)

        self.utm_zone = default_utm_zone
        self.sjtsk2utm = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])
        self.utm_zone_sub = rospy.Subscriber("utm_zone", String, self.update_utm_zone, queue_size=10)

        self.utm_local_trans = None
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)
        
        self.topography_pub = rospy.Publisher('topography', GeographicMap, queue_size=10, latch=True)

        self.categories_str = self.get_categories_str(self.cache_dir)

        self.vis_pubs = dict()
        if vis_bool:
            for c in self.categories_str:
                pub_name = 'topography'+'/'+c
                self.vis_pubs[c] = rospy.Publisher(pub_name, PolygonArray, queue_size=10, latch=True)
                                    
        rospy.Service('topography', GetTopography, self.handle_topography_service)

    def update_utm_zone(self, msg):
        self.utm_zone = msg.data
        self.sjtsk2utm = get_sjtsk_to_utm_trans(self.utm_zone[2], self.utm_zone[:2])

    def get_categories_str(self, data_dir):
        some_file = data_dir + os.listdir(data_dir)[0]
        if len(fiona.listlayers(some_file)) == 3*len(categories_str):
            return categories_str
        elif len(fiona.listlayers(some_file)) == 3*len(original_categories_str):
            return original_categories_str
        else:
            print("Number of layers in your data files is inconsistent with both original categories and reduced categories. Defaulting to using reduced categories, but this should not happen and it might crash down the road.")
            return categories_str

    def check_file_updated(self):
        url = "https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml"
        #updated_fn = os.environ['HOME'] + "/.ros/cache/cuzk_tools/topography/gpkg_updated.txt" 

        #prev_updated = ""

        try:
            prev_updated = os.path.getmtime(DATA_PATH)
            #with open(updated_fn, 'r') as file:
            #    prev_updated = file.readline()
        except:
            pass

        try:
            response = urllib.request.urlopen(url)
            xml_data = response.read().decode('utf-8')
            root = ET.fromstring(xml_data)
            
            updated = root.find(f"{{{'http://www.w3.org/2005/Atom'}}}updated").text
            updated_object = datetime.strptime(updated, '%Y-%m-%dT%H:%M:%S%z')
            updated_timestamp = int(updated_object.timestamp())

            if updated_timestamp > prev_updated:
                dt_prev = datetime.fromtimestamp(prev_updated)
                dt_prev_str = dt_prev.strftime('%Y-%m-%dT%H:%M:%S%z')
                rospy.logwarn(f"Present GPKG file: {dt_prev_str}, Newest GPKG file: {updated}. Consider downloading the newest GPKG file: \n\
Go to https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml and click a link which looks like https://atom.cuzk.cz/ZABAGED-GPKG/datasetFeeds/CZ-00025712-CUZK_ZABAGED-GPKG_1.xml. \n\
Finally download newest data using a link which looks like https://openzu.cuzk.cz/opendata/ZABAGED-GPKG/epsg-5514/ZABAGED-5514-gpkg-20230715.zip and save the gpkg file \
under cuzk_tools/data/data.gpkg. Then run gpkg_parser.py to split the giant data file into smaller ones.")


            #with open(updated_fn, 'w+') as file:
            #    file.write(updated)

            #https://atom.cuzk.cz/ZABAGED-GPKG/ZABAGED-GPKG.xml
            return response, xml_data
        except:
            rospy.logwarn("Tried to check if online ZABAGED polohopis file is updated but failed (maybe due to no internet connection?).")
    

        #for i,entry in enumerate(self.root.iter(f"{{{self.namespace['atom']}}}entry")):
        #    if i == id:
        #        update_date = entry.find(f"{{{self.namespace['atom']}}}updated").text
        #        return update_date
    
    def add_header(self, msg, frame):
        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()
        header.frame_id = frame
        
        msg.header = header

        return msg 
    
    def point2polygon(self, point, radius):
        x, y = point.x,point.y

        polygon = [] # an octagon to be precise
        for i in range(8):
            angle = i * math.pi / 4
            new_x = x + radius * math.cos(angle)
            new_y = y + radius * math.sin(angle)
            polygon.append((new_x, new_y))

        return polygon
    
    def linestring2polygon(self, ls, dist):
        points = [(lsp.x, lsp.y) for lsp in ls.points]
        shap_ls = shap.LineString(points)
        poly = shap_ls.buffer(dist)

        try:
            return list(poly.exterior.coords)
        except:
            conc_poly = []
            for pol in poly.geoms:
                conc_poly += list(pol.exterior.coords)
            return conc_poly
    

    def data2poly_msg(self, data, center_point=None):
        points = [None] * len(data)
        
        for i,row in enumerate(data):
            p = Point32()

            if not center_point is None:
                p.x = (row[0] - center_point[0]) * SCALE
                p.y = (row[1] - center_point[1]) * SCALE
                p.z = 0.

            else:
                p.x = row[0]
                p.y = row[1]
                p.z = 0.

            points[i] = p

        poly = Polygon()
        poly.points = points
        
        poly_stamped = PolygonStamped()
        poly_stamped = self.add_header(poly_stamped, "sjtsk")

        
        poly_stamped.polygon = poly
        
        return poly_stamped
    
    def visualize_topography_msg(self, msg):
        for c_msg in msg.categories:
            poly_arr = PolygonArray()
            msg = self.add_header(poly_arr, "sjtsk")

            for p in c_msg.points.points:
                poly = self.point2polygon(p,2 * SCALE)
                
                poly_msg = self.data2poly_msg(poly,None)

                poly_arr.polygons.append(poly_msg)

            for ls in c_msg.linestrings.linestrings:
                poly = self.linestring2polygon(ls,2 * SCALE)

                poly_msg = self.data2poly_msg(poly,None)

                poly_arr.polygons.append(poly_msg)

            for poly_msg in c_msg.polygons.polygons:
                poly_arr.polygons.append(poly_msg)

            self.vis_pubs[c_msg.name].publish(poly_arr)
            
    def id2url(self, id, c=None):
        # Not at all a real URL.
        if c is None:
            return "https://ags.cuzk.cz/" +str(id)
        else:
            return "https://ags.cuzk.cz/" +str(id) +'/' +str(c)
        
    def sjtsk2frame(self,data,frame):
        if frame == "sjtsk":
            return data
        
        elif frame == "utm":
            if self.utm_zone is None:
                raise ValueError("utm_zone has not been set.")
            
            utm_data = self.sjtsk2utm.transform(data[:,0],data[:,1])
            utm_data = np.vstack([utm_data[0],utm_data[1]]).T

            return utm_data

        elif frame == "utm_local":
            if self.utm_zone is None:
                raise ValueError("utm_zone has not been set.")
            
            utm_data = self.sjtsk2utm.transform(data[:,0],data[:,1])
            utm_data = np.vstack([utm_data[0],utm_data[1]]).T

            try:
                self.utm_local_trans = self.tf_buffer.lookup_transform("utm", "utm_local", rospy.Time())
                x_offset = self.utm_local_trans.transform.translation.x
                y_offset = self.utm_local_trans.transform.translation.y
            except:
                rospy.logwarn("utm_local: Cannot obtain transform (utm, utm_local).")
                if self.utm_local_trans is not None:
                    x_offset = self.utm_local_trans.transform.translation.x
                    y_offset = self.utm_local_trans.transform.translation.y
                    rospy.logwarn("utm_local: Using last known transform.")

            if self.utm_local_trans is not None:
                utm_data[:,0] -=  x_offset
                utm_data[:,1] -=  y_offset

            return utm_data

        elif frame == "wgs":
            wgs_data = SJTSK_TO_WGS.transform(data[:,0],data[:,1])
            wgs_data = np.vstack([wgs_data[0],wgs_data[1]]).T
            return wgs_data
        else:
            rospy.logwarn(f"Unknown frame {frame}, defaulting to frame sjtsk.")

    def handle_topography_service(self, req):
        # Assuming 'req' is of type GetTopography, which contains 'point' and 'radius' fields.
        frame = req.frame.data
        radius = req.radius.data
        point = [req.point.x, req.point.y]
        point_sjtsk = WGS_TO_SJTSK.transform(point[1],point[0])

        if self.include_elevation:
            rospy.wait_for_service('elevation_get')
            try:
                elevation_get = rospy.ServiceProxy('elevation_get', ElevationGet)
                elev_point = req.point
                elev_radius = req.radius

                elev_sjtsk = std_msgs.msg.Bool()
                elev_sjtsk.data = True

                elev_utm = std_msgs.msg.Bool()
                elev_utm.data = False

                elev_utm_local = std_msgs.msg.Bool()
                elev_utm_local.data = False

                elev_wgs = std_msgs.msg.Bool()
                elev_wgs.data = False
                 
                elev_response = elevation_get(elev_point,
                                               elev_radius,
                                               elev_sjtsk,
                                               elev_utm,
                                               elev_utm_local,
                                               elev_wgs)
                
                elev_data = elev_response.elevation_sjtsk
                elev_data = ros_numpy.numpify(elev_data)
                #elev_frame = elev_data.header.frame_id
                elev_data = elev_data.view((np.float32,3))

            except rospy.ServiceException as e:
                print("Service call failed: %s"%e)
        
        x_min = point_sjtsk[0] - radius
        y_min = point_sjtsk[1] - radius
        x_max = point_sjtsk[0] + radius
        y_max = point_sjtsk[1] + radius

        msg = GeographicMap()
        msg = self.add_header(msg, frame)
        msg.id.uuid = fromURL("https://ags.cuzk.cz/"+str(point[0])+'/'+str(point[1])+'/'+str(radius)).bytes
        msg.bounds.min_pt.latitude = y_min
        msg.bounds.min_pt.longitude = x_min
        msg.bounds.max_pt.latitude = y_max
        msg.bounds.max_pt.longitude = x_max

        rects = get_rects(x_min,y_min,x_max,y_max,H,W)

        for rect in rects:
            fn = self.cache_dir  + 'topography' + '_' \
                                + str(rect[0])[1:] + '_' \
                                + str(rect[1])[1:] + '_' \
                                + str(rect[2])[1:] + '_' \
                                + str(rect[3])[1:]
            
            #BudovaJednotlivaNeboBlokBudov
            for layer_name in fiona.listlayers(fn):

                category_name = layer_name.split('_')[0]
                category_ind = self.categories_str.index(category_name)

                geom_name = layer_name.split('_')[1]

                with fiona.open(fn, layer=layer_name) as layer:

                    #print(category_name)
                    #print(geom_name)
                    #print(len(layer))

                    for feature in tqdm(layer):

                        coords = feature['geometry']['coordinates']
                        geom_type = feature['geometry']['type']
                        id = feature['properties']['fid_zbg']

                        map_feature = MapFeature()
                        map_feature.id.uuid = fromURL(self.id2url(id)).bytes

                        category_key_val = KeyValue()
                        category_key_val.key = "category"
                        category_key_val.value = category_name
                        geom_key_val = KeyValue()
                        geom_key_val.key = "geom_type"
                        geom_key_val.value = geom_type
                        map_feature.props += [category_key_val, geom_key_val]

                        if geom_type == 'Point':
                            data = coords

                            dists = ((data[0] - point_sjtsk[0])**2 + (data[1] - point_sjtsk[1])**2)**(1/2)
                            if not np.any(dists<radius):
                                continue
                            
                            #data = np.array(data).reshape(1,2)
                            #data = self.sjtsk2frame(data,frame)
                            #data = data.flatten()

                            point_msg = WayPoint()
                            point_msg.id.uuid = fromURL(self.id2url(id,0)).bytes
                            #point_msg.props.key = "category"
                            #point_msg.props.value = category_name
                            point_msg.position.latitude = data[0]
                            point_msg.position.longitude = data[1]
                            point_msg.position.altitude = 0.

                            msg.points.append(point_msg)
                            map_feature.components.append(point_msg.id)


                        elif geom_type == 'MultiLineString':
                            if len(coords) > 1:
                                print("So far it has always been a single line string, so this code is actually not ready for multiple line strings, so we just take the first one. You will have to adjust the code, sorry!")
                                coords = [coords[0]]

                            data = np.array(coords[0])

                            dists = ((data[:,0] - point_sjtsk[0])**2 + (data[:,1] - point_sjtsk[1])**2)**(1/2)
                            
                            if not np.any(dists<radius):
                                continue

                            #data = self.sjtsk2frame(data,frame)

                            c = 0
                            for row in data:
                                point_msg = WayPoint()
                                point_msg.id.uuid = fromURL(self.id2url(id,c)).bytes
                                #point_msg.props.key = "category"
                                #point_msg.props.value = category_name
                                point_msg.position.latitude = row[0] 
                                point_msg.position.longitude = row[1]
                                point_msg.position.altitude = 0.

                                msg.points.append(point_msg)

                                map_feature.components.append(point_msg.id)

                                c += 1
                            

                        elif geom_type == 'MultiPolygon':
                            if len(coords) > 1:
                                print("So far it has always been a single polygon, so this code is actually not ready for multiple polygons, so we just take the first one. You will have to adjust the code, sorry!")
                                coords = [coords[0]]

                            data = np.array(coords[0][0])                          

                            dists = ((data[:,0] - point_sjtsk[0])**2 + (data[:,1] - point_sjtsk[1])**2)**(1/2)
                            
                            if not np.any(dists<radius):
                                continue
                            
                            #data = self.sjtsk2frame(data,frame)
                            c = 0
                            for row in data:
                                point_msg = WayPoint()
                                point_msg.id.uuid = fromURL(self.id2url(id,c)).bytes
                                #point_msg.props.key = "category"
                                #point_msg.props.value = category_name
                                point_msg.position.latitude = row[0]
                                point_msg.position.longitude = row[1]
                                point_msg.position.altitude = 0.

                                msg.points.append(point_msg)

                                map_feature.components.append(point_msg.id)

                                c += 1
                        
                        else:
                            raise TypeError("Expected types are MultiLineString, MultiPolygon and Point. Got {} instead.".format(geom_type))

                        msg.features.append(map_feature)

        if self.include_elevation:
            try:
                x = [p.position.latitude for p in msg.points]
                y = [p.position.longitude for p in msg.points]
                data = np.array([x,y]).T
                z = interpolate_elevation(data, elev_data)
                xy_in_frame = self.sjtsk2frame(data, frame)

                for p,zi,xyi in zip(msg.points,z,xy_in_frame):
                    p.position.altitude = zi + 0.1
                    p.position.latitude = xyi[0]
                    p.position.longitude = xyi[1]

                #data = np.vstack((x, y, interpolate_elevation(np.array([x,y]).T, elev_data))).T
            except Exception as e:
                rospy.logwarn(f"TOPOGRAPHY: Not able to use elevation data (maybe no internet connection)... threw the following error:\n{e}")

        self.topography_pub.publish(msg)
        #self.visualize_topography_msg(msg)

        # Return empty-ish response.
        response = GetTopographyResponse()
        response.map = msg
        return response


if __name__ == "__main__":
    default_utm_zone = rospy.get_param('/elevation/default_utm_zone', None)
    node = Topography(default_utm_zone)
    rospy.spin()
